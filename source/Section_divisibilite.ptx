<?xml version="1.0" encoding="UTF-8"?>

<!-- Ce fichier constitue une section du livre                              -->
<!--                                                                        -->
<!--      Mathématiques discrètes : Intuition et rigueur                    -->
<!--                                                                        -->
<!-- Creative Commons Attribution Share Alike 4.0 International             -->
<!-- CC-BY-4.0                                                              -->
<!-- Jean-Sébastien Turcotte                                                -->

<!-- Les sections sont divisées en quatre parties, en plus du titre. Les parties introduction et conclusion sont facultatives. Le texte de ceux-ci apparait respectivement avant et après les sections. Les exercices sont à la fin de la section -->

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-divisibilite">   <!-- Ajouter l'identifiant de la section après le - du xml:id -->
    <title> La divisibilité dans les entiers </title>
    <introduction xml:id= "intro-divisibilite">  <!-- Ajouter le même identifiant de la section après le - du xml:id -->
    <p>Si on prend deux nombres <m>a,b\in \mathbb{Z}</m>, on peut les additionner, les soustraire et les multiplier et le résultat sera encore un entier. La division est la seule des quatre opérations élémentaires qui n'est pas garantie de rester un entier. C'est peut-être ce qui en fait une opération si riche et si intéressante. Quand est-ce que la division de deux nombres va produire un entier? Comment le vérifier?</p>
    <p>Dans cette section, on rappelle la notion de division entière, quotient et reste, on définit le plus grand commun diviseur et le plus petit commun multiple de deux nombres naturels, on montre l'algorithme d'Euclide pour calculer le plus grand commun diviseur.</p>
    </introduction>
    
    <!-- Sous-sections à écrire, à même ce fichier -->
    <subsection>
    <title>L'opération de division</title>
    <p>Soit <m>a,b</m> deux entiers. Si on divise <m>a</m> par <m>b</m>, le résultat peut être un entier, comme par exemple avec <m>8/4=2</m>, un rationnel, avec en exemple <m>1/2</m> ou même non défini, si on divise par <m>0</m>. On expliquera prochainement la raison pour laquelle le fait que la division par <m>0</m> est non définie est une bonne chose. Dans le cas où <m>a/b\in \mathbb{Z}</m>, donc où le résultat de la division produit un entier, on dit que <m>b</m> divise <m>a</m>, et on écrit <m>b| a</m> (la barre étant verticale et non pas oblique comme pour l'opérateur de division).</p>
    <definition xml:id="def-divisibilite">
    <title>La divisibilité</title>
    <statement><p>Soit <m>a,b\in \mathbb{Z}</m> avec <m>b\neq 0</m>. On dit que <q><m>a</m> divise <m>b</m></q> et on écrit <m>b| a</m> si le résultat <m>a/b</m> est un entier. On note que les quatre conditions suivantes sont équivalentes:
    <ul>
    <li><p><m>b| a</m></p></li>
    <li><p><m>a=kb</m> pour un certain <m>k\in \mathbb{Z}</m></p></li>
    <li><p><m>b</m> est un facteur (ou diviseur) de <m>a</m></p></li>
    <li><p><m>a</m> est un multiple de <m>b</m>.</p></li>
    </ul>
    </p></statement>
    </definition>
    <p>Quand on écrit <m>b| a</m>, c'est soit vrai, soit faux selon <m>a,b</m>. On a donc une proposition. Pour écrire la négation de cette proposition, on peut utiliser la notation  <m>b\nmid a</m> pour dire que <m>b</m> me divise pas <m>a</m>.</p>
    <example>
    <title>Exemples de divisibilité</title>
    <statement>
    <p>On cherche la valeur de vérité des propositions suivantes.
    <ol>
    <li><p><m>4| 8</m></p></li>
    <li><p><m>8| 4</m></p></li>
    <li><p><m>0| 5</m></p></li>
    <li><p><m>5| 0</m></p></li>
    <li><p><m>12| 60</m></p></li>
    <li><p><m>-6| 48</m></p></li>
    <li><p><m>\forall n\neq 0\in \mathbb{Z},\, n| n^2</m></p></li>
    <li><p><m>\forall n\neq 0\in \mathbb{Z},\, n^2| n</m></p></li>
    <li><p><m>\exists n\in \mathbb{Z},\, n^2| n</m></p></li>
    </ol>
    </p>
    </statement>
    <solution>
    <p>
    <ol>
    <li><p> L'énoncé est vrai puisque <m>8/4=2</m> et <m>2\in \mathbb{Z}</m>.</p></li>
    <li><p> L'énoncé est faux étant donné que <m>4/8=1/2</m> et que <m>1/2\notin \mathbb{Z}</m>.</p></li>
    <li><p> L'énoncé est faux, car non ne peut pas diviser par <m>0</m>.</p></li>
    <li><p>L'énoncé est vrai, car <m>0=0\times 5</m>. En fait, n'importe quel nombre <m>k\in \mathbb{Z}</m> non nul divise <m>0</m>.</p></li>
    <li><p>L'énoncé est vrai puisque <m>12</m> est un facteur de <m>60</m>.</p></li>
    <li><p>Le fait que le nombre est négatif ne pose pas de problème. On peut utiliser n'importe quelle des définitions équivalentes, par exemple <m>48</m> est un multiple de <m>-6</m>, spécifiquement <m>-8</m> fois <m>-6</m> et donc <m>-6| 48</m> est vraie.</p></li>
    <li><p>Puisque <m>n^2=n\times n</m>, on conclut que <m>n</m> est un facteur de <m>n^2</m> et donc que <m>n| n^2</m> peu importe la valeur de <m>n</m> non nulle. La proposition est vraie.</p></li>
    <li><p> Si on peut montrer une valeur de <m>n</m> qui ne respecte pas la condition, alors la proposition sera fausse. Par exemple, si <m>n=2</m>, c'est faux de dire que <m>2^2| 2</m> puisque <m>2/4=1/2</m> et ce n'est pas un entier. Donc la proposition est fausse.</p></li>
    <li><p>Si on arrive à trouver une valeur, la proposition d'existence sera vérifiée. En prenant <m>n=1</m>, on observe que <m>1^2| 1</m> et donc la proposition est vraie.</p></li>
    </ol>
    </p>
    </solution>
    </example>
    <paragraphs xml:id="par-etranglement"><title></title>Les valeurs numériques de l'exemple précédent étaient relativement petites qu'on savait si la relation de divisibilité était vraie assez facilement. Par contre, si on se demande est-ce que <m>123</m> divise <m>198823</m>, alors là ce n'est plus aussi évident. Comment peut-on procéder? On veut  trouver un multiple de <m>123</m> qui donne <m>881123</m> ou montrer que c'est impossible. On peut essayer de procéder par étranglement. Si on fait <m>123\times 10000=1230000</m>, on obtient une valeur trop grande, alors que si on fait <m>123\times 1000=123000</m>, on obtient une valeur trop petite. Si un multiple existe, il se trouve nécessairement entre <m>1000</m> et <m>10000</m>. On essaie <m>123\times 5000=615000</m>, qui est encore trop petit. Avec <m>123\times 7500=922500</m>, on est maintenant trop haut. Le multiple s'il existe se retrouve donc entre <m>5000</m> et <m>7500</m>. On peut continuer de couper la poire en deux comme cela pendant un certain temps et éventuellement, on arrive à <m>123\times 7163=881049</m> qui est plus petit et <m>7164\times 123=881172</m> qui est trop grand. On conclut donc que <m>881123</m> n'est pas un multiple de <m>123</m> et donc <m>123 \nmid 881123</m>.</paragraphs>
    <p>En prenant <m>123\times 7163=881049</m>, on remarque qu'on est à <m>74</m> entiers de la cible. On peut donc écrire <m> 881123=123\times 7163+74</m>. Il se trouve qu'on peut généraliser se résultat pour obtenir la notion bien connue de division.</p>
    <proposition xml:id="prop-divisioneuclidienne">
    <title>La division euclidienne</title>
    <statement><p>Soit <m>a,b\in \mathbb{Z}</m> avec <m>b\neq 0</m>. Alors il existe des uniques entiers <m>q,r</m> avec <m>0\leq r\leq \lvert b\rvert</m> pour lesquels
    <me>
    a=bq+r
    </me>.</p>
    <p>L'entier <m>q</m> est appelé le quotient et l'entier <m>r</m> est appelé le reste.</p>
    </statement>
    </proposition>
    <p>Pour trouver <m>q</m> et <m>r</m>, on peut procéder comme dans le paragraphe précédant la proposition <xref ref="prop-divisioneuclidienne"/>, ou encore utiliser la méthode pour diviser enseignée au primaire.</p>
    <p>On termine avec un exemple présentant des opérateurs de division sur Sage.</p>
    <computation>
    <title>La divisibilité et Sage</title>
    <statement>
    <p>Sage est capable de calculer facilement les entiers <m>q</m> et <m>r</m> de la proposition <xref ref="prop-divisioneuclidienne"/> grâce à deux opérateurs spéciaux. Si <c>a/b</c> produit la division usuelle, donnant un nombre rationnel lorsque <m>b\nmid a</m>, l'opération <c>a//b</c> elle produit le quotient <m>q</m> dans l'expession <m>a=bq+r</m>. Pour obtenir le reste, il faut utiliser <c>a%b</c>. La cellule ci-dessous illustre ces opérations.</p>
    <sage>
    <input>
a=881123 #Changer a,b pour voir d'autres exemples
b=123
show("a/b=",a/b)# La division usuelle
show("a/b=",a/b.n()) # En décimale pour avoir une meilleure idée de l'ordre de grandeur
show("q=",a//b) # Le quotient
show("r=",a%b) # Le reste
    </input>
    </sage>
    <p>Voici une version interactive de la cellule précédente.</p>
    <sage>
    <input>
@interact
def _(a=(-100..100),b=(1..100),b_negatif=("b négatif?",False)):
    if b_negatif==True:
        b=-b
    show("a/b=",a/b)# La division usuelle
    show("a/b=",a/b.n()) # En décimale pour avoir une meilleure idée de l'ordre de grandeur
    show("q=",a//b) # Le quotient
    show("r=",a%b) # Le reste
    </input>
    </sage>
    </statement>
    </computation>
    <p>À remarquer que lorsque <m>b</m> est négatif, Sage retourne un reste négatif alors que dans la proposition <xref ref="prop-divisioneuclidienne"/>, on mentionne que le reste doit satisfaire <m>0\leq r&lt; \lvert b \rvert</m>. Il existe tout de même un autre entier qui satisfait cette relation, qui entrainera une valeur du quotient différente.</p>
    </subsection>
    <subsection>
    <title>Retour sur la conversion à partir de la base dix</title>
    <p>Dans la section précédente, on a utilisé une méthode similaire à l'étranglement pour convertir un nombre de la base décimale aux bases binaires et hexadécimale. On peut utiliser l'écriture sous forme quotient et reste pour trouver les chiffres de l'écriture dans la nouvelle base. On montre l'idée générale avec un exempe concret, qu'on pourra généraliser facilement par la suite. On considère l'écriture de <m>187</m> dans la base deux, établie à l'exemple <xref ref="ex-decimalebinaire"/>. On suppose que l'écriture de <m>187</m> a <m>n</m> chiffres. On remarque que
    <md>
    <mrow>187&amp;=d_n2^n+d_{n-1}2^{n-1}+\cdots d_12^1+d_02^0</mrow>
    <mrow>&amp;=2(d_n2^{n-1}+d_{n-1}2^{n-2}+\cdots d_12^0)+d_0</mrow>
    </md>.
    Puisque <m>q=d_n2^{n-1}+d_{n-2}2^{n-1}+\cdots d_12^0\in \mathbb{Z}</m>, on voit que <m>187=2q+d_0</m> et donc, selon la proposition <xref ref="prop-divisioneuclidienne"/>, le premier chiffre de l'écriture de <m>187</m> en binaire correspond au reste de la division de <m>187</m> par <m>2</m>. Ensuite pour trouver <m>d_1</m>, on répète avec le quotient <m>q</m>. Dans le cas de <m>187</m>, on a <m>q=93</m> et <m>d=d_0=1</m>. En continuant,
    <md>
    <mrow>
    93&amp;=d_n2^{n-1}+d_{n-2}2^{n-1}+\cdots d_12^0
    </mrow>
    <mrow>&amp;=2(d_n2^{n-2}+d_{n-1}2^{n-3}+\cdots d_22^2)+d_1</mrow></md>
    , on peut trouver <m>d_1=1</m> et le prochain quotient égal à <m>46</m>. Avec cela, on obtient <m>d_2=0</m>, amenant le quotient suivant à <m>23</m>. On obtient <m>d_3=1</m> et le quotient suivant vaut <m>11</m>. On continue avec <m>d_4=1</m> pour un quotient de <m>5</m>, puis <d>d_5=1</d> pour un quotient de <m>2</m>, <m>d_6=0</m> pour un quotient de <m>1</m> et finalement, <m>d_7=1</m> pour un quotient de <m>0</m>. On peut donc écrire <m>187=10111011_2</m>. </p>
    <p>Ce qui est bien avec le binaire, c'est que le reste se déduit facilement avec la parité du nombre divisé. Si celui-ci est pair, le reste est de <m>0</m> et s'il est impair, le reste est de <m>1.</m> On peut simplifier la procédure en écrivant les quotients et les restes dans un tableau. La colonne des restes correspond à l'écriture binaire du nombre, les nombres de droite à gauche se trouvant de haut en bas de la colonne. Afin d'illustrer, la conversion du nombre <m>101=1100101_2</m>, aussi de l'exemple <xref ref="ex-decimalebinaire"/> est donnée dans la table <xref ref="tab-binairedecimale101"/>.</p>
    <table xml:id="tab-binairedecimale101">
  <title>Conversion de 101 en binaire avec la méthode des quotients et des restes</title>
  <tabular top="major">
    <row>
      <cell>
        <m>101\div</m>
      </cell>
      <cell>
        <m>2</m>
      </cell>
    </row>
    <row bottom="medium">
      <cell>
        Quotients
      </cell>
      <cell>
        Restes
      </cell>
    </row>
    <row>
      <cell>
        <m>50</m>
      </cell>
      <cell>
        <m>1</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>25</m>
      </cell>
      <cell>
        <m>0</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>12</m>
      </cell>
      <cell>
        <m>1</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>6</m>
      </cell>
      <cell>
        <m>0</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>3</m>
      </cell>
      <cell>
        <m>0</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>1</m>
      </cell>
      <cell>
        <m>1</m>
      </cell>
    </row>
    <row bottom="major">
      <cell>
        <m>0</m>
      </cell>
      <cell>
        <m>1</m>
      </cell>
    </row>
  </tabular>
</table>
<p>La procédure est la même pour les autres bases, mais les restes ne peuvent pas être déterminés aussi facilement qu'en regardant la parité.</p>
<example>
<title>Conversion d'un nombre binaire en hexadécimale</title>
<statement><p>On veut convertir <m>987654321</m> en base hexadécimale, afin de valider l'exemple <xref ref="ex-decihexa"/>. </p></statement>
<solution>
<p>On utilise une table dans laquelle on note les quotients et les restes. Ceux-ci peuvent être calculés avec Sage.</p>
<table>
  <title>Conversion de 987654321 en hexadécimale avec la méthode des quotients et des restes</title>
  <tabular top="major">
    <row>
      <cell>
        <m>987654321\div</m>
      </cell>
      <cell>
        <m>16</m>
      </cell>
    </row>
    <row bottom="medium">
      <cell>
        Quotients
      </cell>
      <cell>
        Restes
      </cell>
    </row>
    <row>
      <cell>
        <m>61728395</m>
      </cell>
      <cell>
        <m>1</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>3858024</m>
      </cell>
      <cell>
        <m>11=B</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>241126</m>
      </cell>
      <cell>
        <m>8</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>15070</m>
      </cell>
      <cell>
        <m>6</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>941</m>
      </cell>
      <cell>
        <m>14=E</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>58</m>
      </cell>
      <cell>
        <m>13=D</m>
      </cell>
    </row>
    <row>
      <cell>
        <m>3</m>
      </cell>
      <cell>
        <m>10=A</m>
      </cell>
    </row>
    <row bottom="major">
      <cell>
        <m>0</m>
      </cell>
      <cell>
        <m>3</m>
      </cell>
    </row>
  </tabular>
</table>
<p>Le résultat est donc bel et bien <m>987654321=3ADE68B1_{16}</m>.</p>
</solution>
</example>
    </subsection>
    <subsection>
    <title>L'algorithme d'Euclide</title>
    <p>Un concept important en théorie des nombres est celui du plus grand commun diviseur, ou pgcd. Le nom est assez évocateur de ce qu'il représente, mais voici une définition formelle.</p>
    <definition xml:id="def-pgcd">
    <title>Le plus grand commun diviseur</title>
    <statement><p>Soit <m>a,b\in \mathbb{Z}</m> avec <m>\lvert a\rvert +\lvert b\rvert\neq 0</m> (les nombres ne sont pas tous les deux nuls). Le <term>plus grand commun diviseur</term> de <m>a,b</m>, noté <m>\pgcd{(a,b)}</m>, est un entier <m>d</m> qui satisfait les trois propriétés suivantes:
    <ol>
    <li><p><m>d>0</m>;</p></li>
    <li><p><m>d| a</m> et <m>d| b</m>;</p></li>
    <li><p>Pour tout <m>c\in \mathbb{Z}</m>, si <m>c| a</m> et <m>c| b</m>, alors <m>c\leq d</m>.</p></li>
    </ol>
    </p>
    <p>Lorsque <m>\pgcd{(a,b)}=1</m>, on dit que <m>a</m> et <m>b</m> sont copremiers.</p>
    </statement>
    </definition>
    <p>On peut trouver le <m>\pgcd</m> de deux nombres en donnant la liste de tous leurs diviseurs et en prenant le plus grand qu'ils ont en commun. Pour de petits nombres, cette approche est viable, mais pour de plus grands nombres, cela risque d'être inefficace et peu pratique. En fait, factoriser de très grands nombres est une opération difficile. Une grande partie de la sécurité informatique repose sur le fait qu'un même un puissance ordinateur ne peut pas factoriser facilement de très grands nombres. L'algorithme d'Euclide fournit une méthode plus efficace pour calculer le <m>\pgcd</m> de deux nombres. Avec de très grands nombres, ça peut être long, mais ça utilise des opérations qu'un ordinateur effectue facilement.  </p>
    <algorithm xml:id="algo-euclide">
    <title>L'algorithme d'Euclide</title>
    <statement><p>Soit <m>a&gt;b&gt; 0</m> des nombres naturels. Le plus grand commun diviseur de <m>a</m> et <m>b</m> est le dernier reste non nul de la suite suivante:
    <md>
    <mrow>a&amp;=bq_1+r_1 &amp; &amp;\text{avec} &amp;0&amp;\leq r_1&lt; b</mrow>
    <mrow>b&amp;=r_1q_2+r_2 &amp; &amp;\text{avec} &amp;0&amp;\leq r_2&lt; r_1</mrow>
    <mrow>r_1&amp;=r_2q_3+r_3 &amp; &amp;\text{avec} &amp;0&amp;\leq r_3&lt; r_2</mrow>
    <mrow>r_2&amp;=r_3q_3+r_4 &amp; &amp;\text{avec} &amp;0&amp;\leq r_4&lt; r_3</mrow>
    <mrow>\vdots&amp;=\vdots &amp;&amp;\vdots &amp;&amp;\vdots</mrow>
    <mrow>r_{n-2}&amp;=r_{n-1}q_{t}+r_t &amp; &amp;\text{avec} &amp;0&amp;\leq r_t&lt; r_{t-1}</mrow>
    <mrow>r_{n-1}&amp;=r_{n}q_{t+1}+r_{t+1} &amp; &amp;\text{avec} &amp;&amp;\phantom{0\leq}r_{t+1}=0</mrow>
    </md>.
    </p></statement>
    </algorithm>
    <example>
    <title>Calcul d'un <m>\pgcd</m></title>
    <statement>
    <p>En utilisant l'algorithme d'Euclide, on veut calculer
    <ol>
    <li><p><m>\pgcd{(402,312)}</m>;</p></li>
    <li><p><m>\pgcd{(147,74)}</m>.</p></li>
    </ol></p>
    </statement>
    <solution><p>On a
    <md>
    <mrow>402&amp;=312\times 1+90</mrow>
    <mrow>312&amp;=90\times 3+42</mrow>
    <mrow>90&amp;=42\times 2+6</mrow>
    <mrow>42&amp;=6\times 7+0 </mrow>
    </md>.
    Selon l'algorithme d'Euclide, <m>\pgcd{(402,312)}=6</m>, le dernier reste non nul.
    </p></solution>
    <solution>
    <p>Cette fois-ci, on a
    <md>
    <mrow>147&amp;=74\times 1+73</mrow>
    <mrow>74&amp;=73\times 1+1</mrow>
    <mrow>73&amp;=1\times 73+0</mrow>
    </md>.
    Selon l'algorithme d'Euclide, <m>\pgcd{(147,74)}=1</m>, le dernier reste non nul. Ces nombres sont donc copremiers.
    </p>
    </solution>
    </example>
    </subsection>
    <conclusion xml:id="concl-divisibilite">  <!-- Ajouter le même identifiant de la section après le - du xml:id -->
    <p>Les points importants de cette section sont:
    <ul>
    <li><p>La définition de la <xref ref="def-divisibilite" text="custom">divisibilité</xref>;</p></li>
    <li><p>L'écriture en <xref ref="prop-divisioneuclidienne" text="custom">quotient et reste</xref> de la division d'un entier par un autre entier;</p></li>
    <li><p>La conversion d'un nombre en base dix vers une autre base à l'aide de la division euclidienne;</p></li>
    <li><p>La définition du <xref ref="def-pgcd" text="custom">plus grand commun diviseur</xref> de deux nombres;</p></li>
    <li><p><xref ref="algo-euclide" text="custom">L'algorithme d'Euclide</xref> pour calculer le <m>\pgcd</m>.</p></li>
    </ul>
    </p>
    </conclusion>
    <reading-questions xml:id="rq-divisibilite">  <!-- Ajouter le même identifiant de la section après le - du xml:id -->
    <introduction>
  <p>Ces questions sont à faire avant de venir en classe et à remettre au début du cours.</p>
  </introduction>
  <exercise>
  <introduction>
  <p>Écrire les divisions suivantes sous la forme quotient et reste. Utiliser la méthode par étranglement comme dans ce <xref ref="par-etranglement" text="custom">paragraphe</xref>. </p>
  </introduction>
  <task><statement><p><m>\frac{321}{17}</m></p></statement></task> 
  <task><statement><p><m>\frac{1167}{93}</m></p></statement></task>
<task><statement><p><m>\frac{2467}{711}</m></p></statement></task>
  </exercise>
   <exercise>
  <introduction>
  <p>Écrire les divisions suivantes sous la forme quotient et reste. Utiliser la méthode de division à la main comme au primaire. </p>
  </introduction>
  <task><statement><p><m>\frac{123}{4}</m></p></statement></task> 
  <task><statement><p><m>\frac{677}{21}</m></p></statement></task>
<task><statement><p><m>\frac{5427}{9}</m></p></statement></task>
  </exercise>
  <exercise><statement><p>Convertir les nombres de l'exercice <xref ref="exo-conversionbinaire"/> en binaire en utilisant la méthode des divisions.</p></statement></exercise>
    <exercise><statement><p>Convertir les nombres de l'exercice <xref ref="exo-conversionhexadecimale"/> en hexadécimale en utilisant la méthode des divisions.</p></statement></exercise>
    <exercise><statement><p>Que fait l'algorithme suivant?</p>
    <listing>
    <caption>Une algorithme sur les entiers</caption>
    <program language="sage">
    <input>
def algo(n):
    laliste = [1]
    d = 2
    while d &lt; n:
        if n % d == 0:
            laliste.append(d)
        d = d + 1
    if n > 1:
        laliste.append(n)
    return laliste
    </input>
    </program>
    </listing>
    <sage>
    <input>
    
    </input>
    </sage>
    </statement></exercise>
    <exercise>
    <statement><p>
    L'algorithme suivant retourne un couple <m>q,r</m> représentant le quotient et le reste de la division <m>a/b</m>, mais il est incomplet. Pour chacun des quatre endroits écrits <q>ÀCOMPLÉTER</q>, écrire les instructions pour que l'algorithme fonctionne. Il est possible de le tester à même la cellule.
    </p>
    <listing>
    <caption>La division euclidienne</caption>
    <program language="sage">
    <input>
def divisionEuclidienne(a, b):
    #Une algorithme qui retourne (q,r) la forme quotient reste de a/b:  a=bq+r
    if :#ÀCOMPLÉTER1
        print('Le pgcd est non défini')
    elif a == 0:
        return #ÀCOMPLÉTER2
    else:
        s = b / abs(b) # le signe de b
        q=0
        r =a 
        if a > 0:
            
            while r - abs(b) >= 0:
                q = q + s
                r = #ÀCOMPLÉTER3
            return q, r
        else: #a &lt;0
            while r &lt; 0:
                q = q - s
                r = #ÀCOMPLÉTER4
            return q, r
    </input>
    </program>
    </listing>
    <sage>
    <input>
    </input>
    </sage>
    </statement>
    </exercise>
  <exercise>
    <statement><p>Noter toute question qui demeure suite à la lecture de la section et la résolution des exercices ci-dessus ou toute précision/clarification à apporter. Note: cette question est facultative.</p></statement>
    </exercise>
    </reading-questions>
   <!--Inclure les exercices de la section ci-dessous--> 
   <xi:include href="Exercices_divisibilite.ptx" />
</section>
<!-- ppcm en exercice -->